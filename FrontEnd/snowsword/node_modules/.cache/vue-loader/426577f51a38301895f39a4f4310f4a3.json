{"remainingRequest":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/src/views/dashboard/index.vue?vue&type=template&id=106c86ed","dependencies":[{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/src/views/dashboard/index.vue","mtime":1671438929000},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/cache-loader/dist/cjs.js","mtime":1715570484549},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1715570461645},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/cache-loader/dist/cjs.js","mtime":1715570484549},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/vue-loader/lib/index.js","mtime":1715570461633}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}