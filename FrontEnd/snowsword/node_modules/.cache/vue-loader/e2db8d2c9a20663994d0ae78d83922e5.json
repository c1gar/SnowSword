{"remainingRequest":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/src/views/database/index.vue?vue&type=style&index=0&id=647e0650&lang=css","dependencies":[{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/src/views/database/index.vue","mtime":1671438929000},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/css-loader/dist/cjs.js","mtime":1715570462613},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1715570461645},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/postcss-loader/src/index.js","mtime":1715570460320},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/cache-loader/dist/cjs.js","mtime":1715570484549},{"path":"/Users/cigar/Downloads/SnowSword-main/FrontEnd/snowsword/node_modules/vue-loader/lib/index.js","mtime":1715570461633}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRleHRtZW51IHsKICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOwogIGJhY2tncm91bmQ6ICNmZmY7CiAgei1pbmRleDogMzAwMDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgbGlzdC1zdHlsZS10eXBlOiBub25lOwogIHBhZGRpbmc6IDVweCAwOwogIGJvcmRlci1yYWRpdXM6IDRweDsKICBmb250LXNpemU6IDE0cHg7CiAgY29sb3I6ICMzMzM7CiAgYm94LXNoYWRvdzogMnB4IDJweCAzcHggMCByZ2JhKDAsIDAsIDAsIDAuMik7Cn0KLmNvbnRleHRtZW51IGxpIHsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogNXB4IDEwcHg7Cn0KLmNvbnRleHRtZW51IGxpOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiAjZjJmMmYyOwogIGN1cnNvcjogZGVmYXVsdDsKfQouZWwtdHJlZS1ub2RlLmlzLWV4cGFuZGVkID4gLmVsLXRyZWUtbm9kZV9fY2hpbGRyZW57CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/database","sourcesContent":["<template>\n  <el-container>\n    <el-main>\n      <el-tabs v-model=\"content.currentTabName\" type=\"card\" editable @edit=\"handleTabsEdit\">\n        <el-tab-pane\n          :key=\"item.name\"\n          v-for=\"item, index in content.tabs\"\n          :label=\"item.title\"\n          :name=\"item.name\"\n        >\n\n          <el-container>\n            <el-aside width=\"250px\" style=\"border:1px solid #e5e7ec;padding-top: 0px;\">\n              <el-button \n              v-if=\"item.empty\" \n              style=\"display:block;margin:10px auto 0px auto;\" \n              size=\"mini\" \n              icon=\"el-icon-plus\" \n              circle \n              @click=\"addDatabaseInfo(false,item,index)\"></el-button>\n              <el-tree\n                :props=\"el_tree_props\"\n                :load=\"(node, resolve) => loadNode(node, resolve, item)\"\n                ref=\"tree\"\n                node-key=\"nodeKey\"\n                lazy\n                @node-click=\"(object,node,component) => nodeClick(node,item,index)\"\n                @node-contextmenu=\"(event,object,node,component) => nodeRightClick(event,node,item,index)\">\n              </el-tree>\n            </el-aside>\n            <el-main style=\"padding-top: 0px;\">\n\n              <el-form :inline=\"true\">\n                <el-form-item label=\"数据库配置\">\n                  <el-input size=\"mini\" readonly v-model=\"item.databaseConf\" placeholder=\"数据库配置\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"数据库名\">\n                  <el-input size=\"mini\" readonly v-model=\"item.dbname\" placeholder=\"数据库名\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"数据量限制\">\n                  <el-select \n                    size=\"mini\" \n                    v-model=\"item.limit\" \n                    placeholder=\"数量\" \n                    style=\"width:100px\"\n                    filterable\n                    allow-create>\n                    <el-option value=\"100\"></el-option>\n                    <el-option label=\"无限制\" value=\"-1\"></el-option>\n                  </el-select>\n                </el-form-item>\n                <el-form-item>\n                  <el-button size=\"mini\" type=\"primary\" @click=\"executeSQL(item)\">执行</el-button>\n                </el-form-item>\n                <el-form-item>\n                  <el-button size=\"mini\" type=\"primary\" @click=\"item.SQL=''\">清空</el-button>\n                </el-form-item>\n              </el-form>\n\n              <el-input\n                type=\"textarea\"\n                :rows=\"10\"\n                placeholder=\"请输入SQL语句\"\n                v-model=\"item.SQL\">\n              </el-input>\n\n              <div\n                v-for=\"(result,index) in item.results\"\n                :key=\"index\">\n\n                <el-table\n                  :data=\"result\"\n                  max-height=\"300\"\n                  border\n                  resizable\n                  style=\"width: 100%;margin-top:20px;\">\n                  <el-table-column\n                    v-for=\"key in Object.keys( (JSON.stringify(result)==='[]')?{}:result[0] )\"\n                    :key=\"key\"\n\n                    :label=\"key\">\n                    <template slot-scope=\"scope\">\n                      {{ scope.row[key]}}\n                    </template>\n                  </el-table-column>\n                </el-table>\n\n              </div>\n\n            </el-main>\n          </el-container>\n\n\n        </el-tab-pane>\n      </el-tabs>\n      <el-empty v-if=\"content.tabs.length == 0\" description=\"未选择Webshell\"></el-empty>\n    </el-main>\n\n    <el-dialog title=\"选择数据\" :visible.sync=\"selectWebshellForm.visible\" width=\"40%\">\n      <el-form :model=\"selectWebshellForm\">\n        <el-form-item label=\"URL\" required>\n          <el-select v-model=\"selectWebshellForm.webshellId\" placeholder=\"请选择\" style=\"width:85%\">\n            <el-option\n              v-for=\"item in webshells\"\n              :key=\"item.id\"\n              :label=\"item.url\"\n              :value=\"item.id\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"selectWebshellForm.visible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"selectWebshell(true)\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n    <el-dialog :title=\"databaseInfoForm.title\" :visible.sync=\"databaseInfoForm.visible\">\n      <el-form :model=\"databaseInfoForm\">\n        <el-form-item label=\"地址\" label-width=\"80px\" required>\n          <el-col :span=\"17\">\n            <el-input placeholder=\"地址\" v-model=\"databaseInfoForm.host\" autocomplete=\"off\" style=\"width:100%\"></el-input>\n          </el-col>\n          <el-col class=\"line\" :span=\"1\"><p style=\"text-align:center; display:block;margin:0px auto\">:</p></el-col>\n          <el-col :span=\"4\">\n            <el-input placeholder=\"端口\" v-model.number=\"databaseInfoForm.port\" autocomplete=\"off\" style=\"width:100%\"></el-input>\n          </el-col>\n        </el-form-item>\n        <el-form-item label=\"用户名\" label-width=\"80px\" required>\n          <el-col :span=\"22\">\n            <el-input placeholder=\"用户名\" v-model=\"databaseInfoForm.username\" autocomplete=\"off\" style=\"width:100%\"></el-input>\n          </el-col>\n        </el-form-item>\n        <el-form-item label=\"密码\" label-width=\"80px\" required>\n          <el-col :span=\"22\">\n            <el-input placeholder=\"密码\" v-model=\"databaseInfoForm.password\" autocomplete=\"off\" style=\"width:100%\"></el-input>\n          </el-col>\n        </el-form-item>\n        <el-form-item label=\"类型\" label-width=\"80px\" required>\n          <el-col :span=\"22\">\n            <el-select \n              v-model=\"databaseInfoForm.type\" \n              placeholder=\"类型\" \n              style=\"width:100%\">\n              <el-option value=\"Mysql\"></el-option>\n            </el-select>\n          </el-col>\n        </el-form-item>\n        <el-form-item label=\"编码\" label-width=\"80px\" required>\n          <el-col :span=\"22\">\n            <el-select \n              v-model=\"databaseInfoForm.code\" \n              placeholder=\"编码\" \n              style=\"width:100%\"\n              filterable\n              allow-create>\n              <el-option value=\"utf8\"></el-option>\n              <el-option value=\"gbk\"></el-option>\n            </el-select>\n          </el-col>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button icon=\"el-icon-connection\" @click=\"testConnection()\">测试连接</el-button>\n        <el-button @click=\"databaseInfoForm.visible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addOrUpdateDatabaseInfo()\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n    <div v-show=\"contextMenu.visible\">\n      <ul id=\"contextMenu\" :style=\"{left:contextMenu.left+'px',top:contextMenu.top+'px'}\" class=\"contextmenu\">\n        <li class=\"el-icon-edit\" @click=\"updateDatabaseInfo(false)\"> 编辑配置 </li>\n        <br>\n        <li class=\"el-icon-document-add\" @click=\"contextMenu_addDatabaseInfo\"> 添加配置 </li>\n        <br>\n        <li class=\"el-icon-delete\" @click=\"deleteDatabaseInfo\"> 删除配置 </li>\n      </ul>\n    </div>\n\n  </el-container>\n</template>\n\n<style>\n  .contextmenu {\n    border: 1px solid #ccc;\n    background: #fff;\n    z-index: 3000;\n    position: absolute;\n    list-style-type: none;\n    padding: 5px 0;\n    border-radius: 4px;\n    font-size: 14px;\n    color: #333;\n    box-shadow: 2px 2px 3px 0 rgba(0, 0, 0, 0.2);\n  }\n  .contextmenu li {\n    margin: 0;\n    padding: 5px 10px;\n  }\n  .contextmenu li:hover {\n    background: #f2f2f2;\n    cursor: default;\n  }\n  .el-tree-node.is-expanded > .el-tree-node__children{\n    display: inline-block;\n  }\n</style>\n\n<script>\n  import request from '@/utils/request'\n\n  export default {\n    data() {\n      return {\n        contextMenu:{\n          visible: false,\n          top: 0,\n          left: 0,\n          height:0\n        },\n\n        databaseInfoForm:{\n          title: \"\",\n          isUpdate: false,\n          host: \"\",\n          port: 3306,\n          username: \"\",\n          password: \"\",\n          type: \"\",\n          code: \"\",\n          visible: false,\n          webshellId:null,\n          tab_index:null,\n        },\n\n        el_tree_props:{\n          label: 'name',\n          isLeaf: 'isleaf'\n        },\n\n        webshells: [\n          // {\n          //   id: 1,\n          //   url: \"http://qq.com/1.php\",\n          // }\n        ],\n\n        content:{\n          currentTabName: \"\",\n          tabIndex:0,\n\n          tabs:[\n          ],\n        },\n\n        selectWebshellForm:{\n          visible: false,\n          webshellId: null\n        }\n\n      }\n    },\n    methods: {\n      loadNode(node, resolve, item) {\n        if (node.level === 0) {   //返回数据库配置列表\n\n          request({\n            url: '/databaseConf/getByWebShellId',\n            method: 'get',\n            params: { id:item.webshellId } \n          }).then(response => {\n\n            let url = response.data.url;\n            let res = url.match(/https?:\\/\\/(.*)?\\//);\n            if(res){\n              item.title = res[1];\n            }else{\n              item.title = url;\n            }\n\n            const databaseInfos = response.data.databases;\n\n            let data = [];\n            databaseInfos.forEach(function(value,index) {\n              let tmp = {};\n              tmp[\"name\"] = value.username+\"@\"+value.host+\":\"+value.port;\n              tmp[\"id\"] = value.id;   //记录数据库配置id\n              tmp[\"nodeKey\"] = value.id;\n\n              tmp[\"host\"] = value.host;   //记录其他配置信息，供右键点击编辑一条配置时取用\n              tmp[\"port\"] = value.port;\n              tmp[\"username\"] = value.username;\n              tmp[\"password\"] = value.password;\n              tmp[\"code\"] = value.code;\n              tmp[\"webshellId\"] = item.webshellId;\n              data.push(tmp);\n            });\n\n            if(JSON.stringify(data)==='[]'){       //判断是否是空数组\n              item.empty = true;\n            }else{\n              item.empty = false;\n            }\n            this.$forceUpdate();\n\n            resolve(data);\n\n          }).catch(error => {\n            item.title = \"加载失败\";\n            console.log(error);\n          })\n\n        }\n\n        if (node.level === 1) {   //点击了某条数据库配置，应该返回数据库名列表\n          const databaseInfoId = node.data.id;  //数据库配置id\n\n          request({\n            url: '/databaseConf/getDatabases',\n            method: 'get',\n            params: { id:databaseInfoId } \n          }).then(response => {\n\n            const databases = response.data[0];\n\n            let data = [];\n            databases.forEach(function(value,index) {\n              let tmp ={};\n              tmp[\"name\"] = Object.values(value)[0];  //显示的名称、数据库名\n              tmp[\"id\"] = databaseInfoId;   //记录数据库配置id\n              tmp[\"nodeKey\"] = databaseInfoId+\".\"+Object.values(value)[0];\n              data.push(tmp);\n            });\n\n            resolve(data);\n            node.loaded = false;  //设置loaded为false，这样每次折叠后再展开时会重新请求后端获取最新数据\n            node.isLeaf = false;\n\n          }).catch(error => {\n            resolve([]);  //resolve空数组后，会变成叶子节点，下面设置回非叶子节点，并且设置为非展开未加载，让用户可以重新点击加载\n            node.expanded = false;\n            node.loaded = false;\n            node.isLeaf = false;\n            console.log(error);\n          })\n\n        }\n\n        if (node.level === 2) {   //点击了某数据库，应该返回表名列表\n          const databaseInfoId = node.data.id;  //数据库配置id\n          const dbname = node.data.name;  //数据库名\n\n          request({\n            url: '/databaseConf/getTables',\n            method: 'get',\n            params: { \n              id:databaseInfoId,\n              dbname:dbname\n            } \n          }).then(response => {\n\n            const tables = response.data[0];\n\n            let data = [];\n            tables.forEach(function(value,index) {\n              let tmp ={};\n              tmp[\"name\"] = Object.values(value)[0];  //显示的名称、表名\n              tmp[\"id\"] = databaseInfoId;   //记录数据库配置id\n              tmp[\"dbname\"] = dbname;   //记录数据库名\n              tmp[\"nodeKey\"] = \"3.\"+databaseInfoId+\".\"+dbname+\".\"+Object.values(value)[0];\n              data.push(tmp);\n            });\n\n            resolve(data);\n            node.loaded = false;  //设置loaded为false，这样每次折叠后再展开时会重新请求后端获取最新数据\n            node.isLeaf = false;\n\n          }).catch(error => {\n            resolve([]);  //resolve空数组后，会变成叶子节点，下面设置回非叶子节点，并且设置为非展开未加载，让用户可以重新点击加载\n            node.expanded = false;\n            node.loaded = false;\n            node.isLeaf = false;\n            console.log(error);\n          })\n\n        }\n\n        if (node.level === 3) {   //点击了某表，应该返回列名列表\n          const databaseInfoId = node.data.id;  //数据库配置id\n          const dbname = node.data.dbname;  //数据库名\n          const table = node.data.name;  //表名\n\n          request({\n            url: '/databaseConf/getColumns',\n            method: 'get',\n            params: { \n              id:databaseInfoId,\n              dbname:dbname,\n              table:table\n            } \n          }).then(response => {\n\n            const columns = response.data[0];\n\n            let data = [];\n            columns.forEach(function(value,index) {\n              let tmp ={};\n              tmp[\"name\"] = value.Field+\" ( \"+value.Type+\" ) \";  //显示的名称\n              tmp[\"id\"] = databaseInfoId;   //记录数据库配置id\n              tmp[\"dbname\"] = dbname;   //记录数据库名\n              tmp[\"table\"] = table;   //记录表名\n              tmp[\"column\"] = value.Field;  //记录列名\n              tmp[\"isleaf\"] = true; //表示是叶子节点\n              data.push(tmp);\n            });\n\n            resolve(data);\n            node.loaded = false;  //设置loaded为false，这样每次折叠后再展开时会重新请求后端获取最新数据\n            node.isLeaf = false;\n\n          }).catch(error => {\n            resolve([]);  //resolve空数组后，会变成叶子节点，下面设置回非叶子节点，并且设置为非展开未加载，让用户可以重新点击加载\n            node.expanded = false;\n            node.loaded = false;\n            node.isLeaf = false;\n            console.log(error);\n          })\n\n        }\n      },\n\n      test(){\n        console.log(1);\n      },\n\n      handleTabsEdit(targetName, action) {\n        if (action === 'add') {\n          this.selectWebshell(false);\n        }\n        if (action === 'remove') {\n          let tabs = this.content.tabs;\n          let activeName = this.content.currentTabName;\n          if (activeName === targetName) {\n            tabs.forEach((tab, index) => {\n              if (tab.name === targetName) {\n                let nextTab = tabs[index + 1] || tabs[index - 1];\n                if (nextTab) {\n                  activeName = nextTab.name;\n                }\n              }\n            });\n          }\n          \n          this.content.currentTabName = activeName;\n          this.content.tabs = tabs.filter(tab => tab.name !== targetName);\n        }\n      },\n\n      fetchWebshellData(){\n        request({\n          url: '/webshell/findAll',\n          method: 'get',\n        }).then(response => {\n          this.webshells = response.data;\n        }).catch(error => {\n          console.log(error);\n        })\n      },\n\n      selectWebshell(isAddTab){\n        if(isAddTab){\n          this.selectWebshellForm.visible = false;\n          let newTabName = ++this.content.tabIndex + '';\n          let webshellId = this.selectWebshellForm.webshellId;\n\n          let index = this.content.tabs.push({\n            title: \"加载中...\",\n            name: newTabName,\n            webshellId:webshellId,\n            limit:100,\n            databaseConf:\"\",\n            databaseConfId:0,\n            dbname:\"\",\n          })-1;\n          this.content.currentTabName = newTabName;\n\n        }else{\n          this.selectWebshellForm.visible = true;\n        }\n      },\n\n      addDatabaseInfo(isSubmit,item,index){\n        if(isSubmit){\n          request({\n            url: '/databaseConf/add',\n            method: 'post',\n            data: { \n              webshellId:this.databaseInfoForm.webshellId,\n              host:this.databaseInfoForm.host,\n              port:this.databaseInfoForm.port,\n              username:this.databaseInfoForm.username,\n              password:this.databaseInfoForm.password,\n              code:this.databaseInfoForm.code,\n            } \n          }).then(response => {\n            \n            this.$message({\n              type: 'success',\n              message: '添加成功'\n            });\n\n            this.refreshData(this.databaseInfoForm.tab_index);\n            this.databaseInfoForm.visible = false;\n\n          }).catch(error => {\n            console.log(error);\n          })\n        }else{\n          this.databaseInfoForm.title = \"添加配置\";\n          this.databaseInfoForm.isUpdate = false;\n          this.databaseInfoForm.host = \"\";\n          this.databaseInfoForm.port = 3306;\n          this.databaseInfoForm.username = \"\";\n          this.databaseInfoForm.password = \"\";\n          this.databaseInfoForm.type = \"Mysql\";\n          this.databaseInfoForm.code = \"utf8\";\n          this.databaseInfoForm.visible = true;\n\n          this.databaseInfoForm.webshellId = item.webshellId;\n          this.databaseInfoForm.tab_index = index;\n        }\n      },\n\n      addOrUpdateDatabaseInfo(){\n        if(this.databaseInfoForm.isUpdate){\n          this.updateDatabaseInfo(true);\n        }else{\n          this.addDatabaseInfo(true,null,null);\n        }\n      },\n\n      refreshData(index){\n        this.$refs.tree[index].root.loaded = false;\n        this.$refs.tree[index].root.expanded = false;\n        this.$refs.tree[index].root.expand();\n      },\n\n      nodeRightClick(event,node,item,index){\n        this.closeMenu();\n        if (node.level == 1){\n          event.preventDefault();\n\n          const offsetLeft = this.$el.getBoundingClientRect().left\n          const left = event.clientX - offsetLeft;\n          this.contextMenu.left = left;\n          if ( (document.body.scrollHeight - event.pageY) < this.contextMenu.height ){\n            this.contextMenu.top = document.body.scrollHeight - this.contextMenu.height-70;\n          }else{\n            this.contextMenu.top = event.pageY - 60;\n          }\n          this.contextMenu.visible = true;\n\n          this.contextMenu.item = item;     //记录item和index还有node,在点击菜单中的选项时需要用到这两个值\n          this.contextMenu.index = index;\n          this.contextMenu.node = node;\n\n          document.body.addEventListener('click', this.closeMenu);\n        }\n      },\n\n      closeMenu() {\n        this.contextMenu.visible = false;\n        document.body.removeEventListener('click', this.closeMenu);\n      },\n\n      updateDatabaseInfo(isSubmit){\n        if(isSubmit){\n\n          request({\n            url: '/databaseConf/update',\n            method: 'post',\n            data: { \n              id: this.databaseInfoForm.databaseInfoId,\n              host: this.databaseInfoForm.host,\n              port: this.databaseInfoForm.port,\n              username: this.databaseInfoForm.username,\n              password: this.databaseInfoForm.password,\n              code: this.databaseInfoForm.code\n            } \n          }).then(response => {\n            \n            this.$message({\n              type: 'success',\n              message: '更新成功'\n            });\n\n            this.databaseInfoForm.visible = false;\n            this.refreshData(this.databaseInfoForm.index);\n\n          }).catch(error => {\n            console.log(error);\n          })\n\n        }else{\n          this.databaseInfoForm.title = \"修改配置\";\n          this.databaseInfoForm.isUpdate = true;\n          this.databaseInfoForm.host = this.contextMenu.node.data.host;\n          this.databaseInfoForm.port = this.contextMenu.node.data.port;\n          this.databaseInfoForm.username = this.contextMenu.node.data.username;\n          this.databaseInfoForm.password = this.contextMenu.node.data.password;\n          this.databaseInfoForm.type = \"Mysql\";\n          this.databaseInfoForm.code = this.contextMenu.node.data.code;\n          this.databaseInfoForm.visible = true;\n          this.databaseInfoForm.index = this.contextMenu.index;\n          this.databaseInfoForm.databaseInfoId = this.contextMenu.node.data.id;\n          this.databaseInfoForm.webshellId = this.contextMenu.node.data.webshellId;\n        }\n      },\n\n      contextMenu_addDatabaseInfo(){\n        this.addDatabaseInfo(false,this.contextMenu.item,this.contextMenu.index);\n      },\n\n      deleteDatabaseInfo(){\n        this.$confirm('此操作将永久删除该配置, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n\n          request({\n            url: '/databaseConf/deleteById',\n            method: 'get',\n            params: { \n              id:this.contextMenu.node.data.id\n            } \n          }).then(response => {\n            \n            this.$message({\n              type: 'success',\n              message: '删除成功'\n            });\n\n            this.refreshData(this.contextMenu.index);\n\n          }).catch(error => {\n            console.log(error);\n          })\n\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '已取消删除'\n          });          \n        });\n      },\n\n      testConnection(){\n        request({\n          url: '/databaseConf/testConnection',\n          method: 'post',\n          data: { \n            webshellId: this.databaseInfoForm.webshellId,\n            host: this.databaseInfoForm.host,\n            port: this.databaseInfoForm.port,\n            username: this.databaseInfoForm.username,\n            password: this.databaseInfoForm.password,\n            code: this.databaseInfoForm.code\n          } \n        }).then(response => {\n          \n          if(response.data){\n            this.$message({\n              type: 'success',\n              message: '连接成功'\n            });\n          }else{\n            this.$message({\n              type: 'error',\n              message: response.message\n            });  \n          }\n\n        }).catch(error => {\n          console.log(error);\n        })\n      },\n\n      nodeClick(node,item,index){\n        if(node.level == 1) {\n          item.databaseConfId = node.data.id;\n          item.databaseConf = node.data.name;\n        }else if(node.level == 2){\n          item.databaseConfId = node.parent.data.id;\n          item.databaseConf = node.parent.data.name;\n          item.dbname = node.data.name;\n        }else if(node.level == 3){\n          item.databaseConfId = node.parent.parent.data.id;\n          item.databaseConf = node.parent.parent.data.name;\n          item.dbname = node.parent.data.name;\n        }else if(node.level == 4){\n          item.databaseConfId = node.parent.parent.parent.data.id;\n          item.databaseConf = node.parent.parent.parent.data.name;\n          item.dbname = node.parent.parent.data.name;\n        }\n      },\n\n      executeSQL(item){\n        item.results = [[]];\n        this.$forceUpdate();\n        request({\n          url: '/databaseConf/executeSQL',\n          method: 'post',\n          data: { \n            id:item.databaseConfId,\n            dbname:item.dbname,\n            SQL:item.SQL,\n            limit:Number(item.limit),\n          } \n        }).then(response => {\n          \n          item.results = response.data;\n          this.$forceUpdate();\n\n        }).catch(error => {\n          console.log(error);\n        })\n      }\n\n\n    },\n\n    created(){\n      this.fetchWebshellData();\n      this.name = this.$route.name;\n      if(this.$route.params.id){\n        this.selectWebshellForm.webshellId = this.$route.params.id\n        this.selectWebshell(true);\n      }\n    },\n\n    watch: {\n      $route(to, from) {\n        if(to.name == this.name){\n          this.fetchWebshellData();\n          if(this.$route.params.id){\n            this.selectWebshellForm.webshellId = this.$route.params.id\n            this.selectWebshell(true);\n          }\n        }\n      }\n    },\n\n    mounted(){\n      window.vue = this;\n    },\n\n  };\n</script>"]}]}